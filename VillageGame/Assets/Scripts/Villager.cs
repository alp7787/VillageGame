using UnityEngine;
using System.Collections;
//including some .NET for dynamic arrays called List in C#
using System.Collections.Generic;

//directives to enforce that our parent Game Object required components
[RequireComponent(typeof(CharacterController))]
//[RequireComponent(typeof(Steering))]

public class Villager : NPC
{
	// Each vehicle contains a CharacterController which
	// makes it easier to deal with the relationship between
	// movement initiated by the character and the forces
	// generated by contact with the terrain & other game objects.
	//private Steering steering;
	private GameManager gameManager;
	
	//wander varables
	public int _wanAngle;
	public int radiusOfCircle;
	public int _wanChange;
	
	//follower reference for deletion
	private Follow follower;
	public Follow Follower {get{return 
	follower;} set{follower = value;}}
	
	// a unique identification number assigned by the flock manager 
	private int index = -1;
	public int Index {
		get { return index; }
		set { index = value; }
	}
	
	// get a reference to the manager's FlockManager component (script)
	public void setGameManager (GameObject gManager)
	{
		gameManager = gManager.GetComponent<GameManager> ();
	}
	
	//movement variables
	private Vector3 moveDirection;

	//steering variable
	private bool leaderFollowBool;

	//list of nearby flockers
	private List<GameObject> nearVillagers = new List<GameObject> ();
	private List<float> nearVillagersDistances = new List<float> ();
	
	//Creation of Villager
	protected override void Start ()
	{
		//get component references
		characterController = gameObject.GetComponent<CharacterController> ();
		//steering = gameObject.GetComponent<Steering> ();
		
		leaderFollowBool = false;
		
		gameManager = GameManager.Instance;
		base.Start ();
	}
	
	// Handles Collision with Cart for Scoring and Clean Up Purposes
	public void OnCollisionEnter(Collision wCollision)
	{
		// If colliding with cart
		if(wCollision.gameObject.tag == "Cart")
		{
			gameManager.SaveVillager(this);
		}
	}
		
		// Update is called once per frame
	protected override void Update ()
	{
		CalcSteeringForce ();
		ClampSteering ();
		
		moveDirection = transform.forward * speed;
		// movedirection equals velocity
		//add acceleration
		moveDirection += steeringForce * Time.deltaTime;
		//update speed
		speed = moveDirection.magnitude;
		if (speed != moveDirection.magnitude) {
			moveDirection = moveDirection.normalized * speed;
		}
		//orient transform
		if (moveDirection != Vector3.zero)
			transform.forward = moveDirection;
		
		// Apply gravity
		moveDirection.y -= gravity;

		
		// the CharacterController moves us subject to physical constraints
		characterController.Move (moveDirection * Time.deltaTime);
	}
	
	//Uses the various Movement Behaviors to calculate the vector to
	// determine the next position of the agent
	protected override void CalcSteeringForce ()
	{
		steeringForce = Vector3.zero;

		
		for(int i = 0; i < gameManager.Werewolves.Count; i++)
		{
			
			float wDist =  Vector3.Distance(this.transform.position, gameManager.Werewolves[i].transform.position);
			
			if( wDist < 20)
			{
				if(wDist < 5)
				{
					steeringForce += Flee(gameManager.Werewolves[i].transform.position);
					
					if(leaderFollowBool == true)
					{
						gameManager.Followers.Remove(this);	
					}
						
					
					leaderFollowBool = false;
				}
				else
				{
					steeringForce += Evasion(gameManager.Werewolves[i].transform.position 
						+ gameManager.Werewolves[i].transform.forward);
				}
			}
			else if(Vector3.Distance(this.transform.position, gameManager.Mayor.transform.position) < 40 && leaderFollowBool == false)
			{
				gameManager.Followers.Add(this);
				steeringForce += 10 * LeaderFollow();
				steeringForce += gameManager.separationWt * Separation();
				steeringForce += gameManager.cohesionWt * Cohesion();
			}
			else if(leaderFollowBool == true)
			{
				steeringForce += 15 * LeaderFollow();
				steeringForce += gameManager.separationWt * Separation();
				steeringForce += gameManager.cohesionWt * Cohesion();
			}
			else
			{	
				steeringForce += 2 * Wander();
			}
		}
		
		steeringForce += gameManager.inBoundsWt * StayInBounds (200, new Vector3 (469, 0, 454));
		
		//avoid close obstacles
		for(int i =0; i < gameManager.Obstacles.Length; i++)
		{
			if(Vector3.Distance(this.transform.position, gameManager.Obstacles[i].transform.position) < 60)
			{
				steeringForce += AvoidObstacle(gameManager.Obstacles[i], gameManager.avoidDist);	
			}
		}
	}

	
	//Movement AI Behaviors -----------------------------------------------------------------------
	
	// tether type containment - not very good!
	private Vector3 StayInBounds ( float radius, Vector3 center)
	{
		
		steeringForce = Vector3.zero;
		
		if(transform.position.x > 750)
		{
			steeringForce += Flee(new Vector3(800,0,transform.position.z));
		}
		
		if(transform.position.x < 200)
		{
			steeringForce += Flee(new Vector3(150,0,transform.position.z));
		}
		
		if(transform.position.z > 715)
		{
			steeringForce += Flee(new Vector3(transform.position.x,0,765));
		}
		
		if(transform.position.z < 205)
		{
			steeringForce += Flee(new Vector3(transform.position.x,0,155));
		}
		
		if(transform.position.x > 750 || transform.position.x < 200 || 
			transform.position.z > 715 || transform.position.z < 205)
		{
			steeringForce += Seek(gameManager.gameObject);
		}
		
		return steeringForce;
	}
	
	private Vector3 Cohesion ()
	{
		return Arrival (gameManager.Mayor.transform.position);
	}
	
	private Vector3 Separation ()
	{
		//empty our lists
		nearVillagers.Clear ();
		nearVillagersDistances.Clear ();
		
		//method variables
		Vector3 dv = new Vector3(); // the desired velocity
		Vector3 sum = new Vector3();
		
		for(int i = 0; i < gameManager.Villagers.Count; i++)
		{
			//retireves distance between two flockers of reference numbers
			// findFlocker and i
			
			GameObject villager = gameManager.Villagers[i];
			
			float dist = Vector3.Distance(this.transform.position, gameManager.Villagers[i].transform.position);
			
			if(dist < 10.0 && dist != 0)
			{
				dv =  this.transform.position - villager.transform.position;
				
				dv.Normalize();
				
				dv = dv * ((1.0f/dist));
				dv.y = 0;
				sum += dv;
			}
		}
		
		float dist2 = Vector3.Distance(this.transform.position, gameManager.Mayor.transform.position);
		
		if(dist2 <= 10.0 && dist2 != 0)
		{
			dv = this.transform.position - gameManager.Mayor.transform.position;
			
			dv.Normalize();
			
			dv = dv * ((1.0f/dist2));
			dv.y = 0;
			
			sum += dv;
		}
		
		
		//sum.Normalize();
		//sum = sum * (steering.maxSpeed);
		sum = sum - velocity;

		return AlignTo(sum);
	}

	private Vector3 Wander()
	{

		steeringForce = Vector3.zero;

		Vector3 distance = transform.forward*2;// distance
		Vector3 refer = new Vector3(this.transform.position.x + distance.x,0,this.transform.position.z + distance.z);
		Vector3 wanderForce = Vector3.forward * radiusOfCircle;
		wanderForce = Quaternion.AngleAxis(_wanAngle, Vector3.up) * wanderForce;
		_wanAngle +=  Random.Range(0, 2 * _wanChange) - _wanChange;
		refer = refer + wanderForce;

		steeringForce += Seek(refer);


		return steeringForce;

	}	
	
	private Vector3 LeaderFollow()
	{
		steeringForce = Vector3.zero;
	
		
		if(gameManager.Followers[0] == this || gameManager.Followers[0] == null)
		{

			steeringForce += Arrival(gameManager.Mayor.transform.position);	
		}
		else
		{
			
			steeringForce += Arrival(gameManager.Followers[gameManager.Followers.Count-1].transform.position);
		}

		steeringForce.y = 0;

		return steeringForce;
	}
	
	private Vector3 RunAway()
	{
		
		steeringForce = Vector3.zero;
		
		for(int i = 0; i < gameManager.Werewolves.Count; i++)
		{
			if(Vector3.Distance(gameManager.Werewolves[i].transform.position, this.transform.position) < 80)
			{
				steeringForce += Evasion(gameManager.Werewolves[i].transform.position);	
			}
			else
			{
				steeringForce += Vector3.zero;	
			}
		}
		
		for(int i = 0; i < gameManager.Werewolves.Count; i++)
		{
			if(Vector3.Distance(gameManager.Werewolves[i].transform.position, this.transform.position) < 20)
			{
				steeringForce += Flee(gameManager.Werewolves[i]);	
			}
			else
			{
				steeringForce += Vector3.zero;
			}
		}
		
		return steeringForce;
	}

	protected override void ClampSteering ()
	{
		if (steeringForce.magnitude > maxForce) {
			steeringForce.Normalize ();
			steeringForce *= maxForce;
		}
	}
	
	//---------------------------------------------------------------------------------------------
	


	
	
}