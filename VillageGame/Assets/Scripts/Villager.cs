using UnityEngine;
using System.Collections;
//including some .NET for dynamic arrays called List in C#
using System.Collections.Generic;

//directives to enforce that our parent Game Object required components
[RequireComponent(typeof(CharacterController))]
//[RequireComponent(typeof(Steering))]

public class Villager : NPC
{
	// Each vehicle contains a CharacterController which
	// makes it easier to deal with the relationship between
	// movement initiated by the character and the forces
	// generated by contact with the terrain & other game objects.
	//private Steering steering;

	//seek distance parameter
	public int seekDist = 40;
	
	//wander varables
	public int _wanAngle;
	public int radiusOfCircle;
	public int _wanChange;

	// Current node index, I believe. Don't quote me on that
	private int currentNodeIndex = 0;

	//follower reference for deletion
	private Follow follower;
	public Follow Follower {get{return 
	follower;} set{follower = value;}}
	
	// a unique identification number assigned by the flock manager 
	private int index = -1;
	public int Index {
		get { return index; }
		set { index = value; }
	}
	
	// get a reference to the manager's FlockManager component (script)
	public void setGameManager (GameObject gManager)
	{
		gameManager = gManager.GetComponent<GameManager> ();
	}

	//distance between self and mayor(for werewolves)
	private float mayorDist;
	public float MayorDist {get{return mayorDist;}}
	
	//movement variables
	private Vector3 moveDirection;

	//steering variable
	private bool leaderFollowBool;

	//list of nearby flockers
	//private List<GameObject> nearVillagers = new List<GameObject> ();
	//private List<float> nearVillagersDistances = new List<float> ();
	
	//Creation of Villager
	protected override void Start ()
	{
		//get component references
		characterController = gameObject.GetComponent<CharacterController> ();
		//steering = gameObject.GetComponent<Steering> ();
		
		leaderFollowBool = false;
		
		gameManager = GameManager.Instance;
		base.Start ();
	}
	
	// Handles Collision with Cart for Scoring and Clean Up Purposes
	public void OnCollisionEnter(Collision wCollision)
	{
		// If colliding with cart
		if(wCollision.gameObject.tag == "Cart")
		{
			gameManager.SaveVillager(this);
		}
	}
		
		// Update is called once per frame
	protected override void Update ()
	{
		CalcSteeringForce ();
		ClampSteering ();
		
		moveDirection = transform.forward * speed;
		// movedirection equals velocity
		//add acceleration
		moveDirection += steeringForce * Time.deltaTime;
		//update speed
		speed = moveDirection.magnitude;
		if (speed != moveDirection.magnitude) {
			moveDirection = moveDirection.normalized * speed;
		}
		//orient transform
		if (moveDirection != Vector3.zero)
			transform.forward = moveDirection;
		
		// Apply gravity
		moveDirection.y -= gravity;

		
		// the CharacterController moves us subject to physical constraints
		characterController.Move (moveDirection * Time.deltaTime);
	}
	
	//Uses the various Movement Behaviors to calculate the vector to
	// determine the next position of the agent
	protected override void CalcSteeringForce ()
	{
		steeringForce = Vector3.zero;



		// GO TO CART DAMNIT
		if(Vector3.Distance(this.transform.position, gameManager.Cart.transform.position) < seekDist)
			steeringForce += 10 * Seek (gameManager.Cart);

		// meander a bit
		steeringForce += Wander();

		// Werewolf awareness crap
		for(int i = 0; i < gameManager.Werewolves.Count; i++)
		{
			
			float wDist =  Vector3.Distance(this.transform.position, gameManager.Werewolves[i].transform.position);
			
			if( wDist < 20)
			{
				if(wDist < 5)
				{
					steeringForce += Flee(gameManager.Werewolves[i].transform.position);
					
					if(leaderFollowBool == true)
					{
						gameManager.Followers.Remove(this);	
					}
						
					
					leaderFollowBool = false;
				}
				else
				{
					steeringForce += Evasion(gameManager.Werewolves[i].transform.position 
						+ gameManager.Werewolves[i].transform.forward);
				}
			}
		}

		mayorDist = Vector3.Distance(this.transform.position, gameManager.Mayor.transform.position);

		// Seek mayor if close enough, else make sure you're on the path
		if(mayorDist < seekDist)
		{
			gameManager.Followers.Add(this);
			//steeringForce += 10 * LeaderFollow();
			//steeringForce += gameManager.separationWt * Separation();
			steeringForce += Arrival(gameManager.Mayor.transform.position) * mayorDist/seekDist;
			//steeringForce += gameManager.cohesionWt * Cohesion();
		}
		else{
			// MOVE ON PATH DAWG
			steeringForce += FollowPath();
		}

		// stay in bounds or whatever
		steeringForce += gameManager.inBoundsWt * StayInBounds (200, new Vector3 (469, 0, 454));

		// Gimme some space
		steeringForce += gameManager.separationWt * Separation();
		
		//avoid close obstacles LIKE TREES
		for(int i =0; i < gameManager.Obstacles.Length; i++)
		{
			if(Vector3.Distance(this.transform.position, gameManager.Obstacles[i].transform.position) < 60)
			{
				steeringForce += AvoidObstacle(gameManager.Obstacles[i], gameManager.avoidDist);	
			}
		}
	}

	
	//Movement AI Behaviors -----------------------------------------------------------------------

	protected override Vector3 FollowPath()
	{
		// default so we don't break
		if(gameManager.VillagerPath.Length <= 0)
			return Vector3.zero;

		//cycle the node if im too close
		if(Vector3.Distance(transform.position, gameManager.VillagerPath[currentNodeIndex].transform.position) <= 10.0f)
		{
			currentNodeIndex++;//go to next node
			if(currentNodeIndex >= gameManager.VillagerPath.Length)
			{
				currentNodeIndex = 0;
			}
		}
		return Seek(gameManager.VillagerPath[currentNodeIndex].transform.position);//head for the next node in the path
	}


	// tether type containment - not very good!
	private Vector3 StayInBounds ( float radius, Vector3 center)
	{
		
		steeringForce = Vector3.zero;
		
		if(transform.position.x > 750)
		{
			steeringForce += Flee(new Vector3(800,0,transform.position.z));
		}
		
		if(transform.position.x < 200)
		{
			steeringForce += Flee(new Vector3(150,0,transform.position.z));
		}
		
		if(transform.position.z > 715)
		{
			steeringForce += Flee(new Vector3(transform.position.x,0,765));
		}
		
		if(transform.position.z < 205)
		{
			steeringForce += Flee(new Vector3(transform.position.x,0,155));
		}
		
		if(transform.position.x > 750 || transform.position.x < 200 || 
			transform.position.z > 715 || transform.position.z < 205)
		{
			steeringForce += Seek(gameManager.gameObject);
		}
		
		return steeringForce;
	}
	
	private Vector3 Cohesion ()
	{
		
		Vector3 averagePosition = Vector3.zero;
		foreach(GameObject flocker in gameManager.Villagers)
		{
			averagePosition += flocker.transform.position;
		}
		averagePosition = averagePosition/gameManager.Villagers.Count;
		return averagePosition;
	}
	
	private Vector3 Separation ()
	{
		Vector3 sepVect = Vector3.zero;
		float distance = Mathf.Infinity;
		int index = -1;//null
		for(int i = 0; i < gameManager.Villagers.Count; i++)
		{
			if(Vector3.Distance(this.transform.position, gameManager.Villagers[i].transform.position) < distance && gameManager.Villagers[i]!=this.gameObject)
			{
				index = i;
			}
		}
		if(Vector3.Distance(this.transform.position, gameManager.Villagers[index].transform.position) <= gameManager.separationDist)
		{
			if(Vector3.Distance(this.transform.position, gameManager.Villagers[index].transform.position) <= 5)
				sepVect = Flee(gameManager.Villagers[index].transform.position);
			else
				sepVect = Avoid(gameManager.Villagers[index].transform.position);
		}
		return sepVect;

		//empty our lists
//		nearVillagers.Clear ();
//		nearVillagersDistances.Clear ();
//		
//		//method variables
//		Vector3 dv = new Vector3(); // the desired velocity
//		Vector3 sum = new Vector3();
//		
//		for(int i = 0; i < gameManager.Villagers.Count; i++)
//		{
//			//retireves distance between two flockers of reference numbers
//			// findFlocker and i
//			
//			GameObject villager = gameManager.Villagers[i];
//			
//			float dist = Vector3.Distance(this.transform.position, gameManager.Villagers[i].transform.position);
//			
//			if(dist < 10.0 && dist != 0)
//			{
//				dv =  this.transform.position - villager.transform.position;
//				
//				dv.Normalize();
//				
//				dv = dv * ((1.0f/dist));
//				dv.y = 0;
//				sum += dv;
//			}
//		}
//		
//		float dist2 = Vector3.Distance(this.transform.position, gameManager.Mayor.transform.position);
//		
//		if(dist2 <= 10.0 && dist2 != 0)
//		{
//			dv = this.transform.position - gameManager.Mayor.transform.position;
//			
//			dv.Normalize();
//			
//			dv = dv * ((1.0f/dist2));
//			dv.y = 0;
//			
//			sum += dv;
//		}
//		
//		
//		//sum.Normalize();
//		//sum = sum * (steering.maxSpeed);
//		sum = sum - velocity;
//
//		return AlignTo(sum);
	}

	private Vector3 Wander()
	{

		steeringForce = Vector3.zero;

		Vector3 distance = transform.forward*2;// distance
		Vector3 refer = new Vector3(this.transform.position.x + distance.x,0,this.transform.position.z + distance.z);
		Vector3 wanderForce = Vector3.forward * radiusOfCircle;
		wanderForce = Quaternion.AngleAxis(_wanAngle, Vector3.up) * wanderForce;
		_wanAngle +=  Random.Range(0, 2 * _wanChange) - _wanChange;
		refer = refer + wanderForce;

		steeringForce += Seek(refer);


		return steeringForce;

	}	
	
	private Vector3 LeaderFollow()
	{
		steeringForce = Vector3.zero;
	
		
		if(gameManager.Followers[0] == this || gameManager.Followers[0] == null)
		{

			steeringForce += Arrival(gameManager.Mayor.transform.position);	
		}
		else
		{
			
			steeringForce += Arrival(gameManager.Followers[gameManager.Followers.Count-1].transform.position);
		}

		steeringForce.y = 0;

		return steeringForce;
	}
	
	private Vector3 RunAway()
	{
		
		steeringForce = Vector3.zero;
		
		for(int i = 0; i < gameManager.Werewolves.Count; i++)
		{
			if(Vector3.Distance(gameManager.Werewolves[i].transform.position, this.transform.position) < 80)
			{
				steeringForce += Evasion(gameManager.Werewolves[i].transform.position);	
			}
			else
			{
				steeringForce += Vector3.zero;	
			}
		}
		
		for(int i = 0; i < gameManager.Werewolves.Count; i++)
		{
			if(Vector3.Distance(gameManager.Werewolves[i].transform.position, this.transform.position) < 20)
			{
				steeringForce += Flee(gameManager.Werewolves[i]);	
			}
			else
			{
				steeringForce += Vector3.zero;
			}
		}
		
		return steeringForce;
	}

	protected override void ClampSteering ()
	{
		if (steeringForce.magnitude > maxForce) {
			steeringForce.Normalize ();
			steeringForce *= maxForce;
		}
	}	
	//---------------------------------------------------------------------------------------------
}